# 代码规范

## 文件结构
- 每个文件顶部必须有简短的文件说明
- 每个类/函数前必须有简短的注释说明功能
- 复杂的代码块需要有注释说明

## 命名规范
- 类名：大驼峰 (PascalCase)
- 变量/函数：小驼峰 (camelCase)
- 常量：全大写下划线 (UPPER_SNAKE_CASE)
- 接口：以 I 开头 (IPascalCase)

## 类型定义
- 必须使用 TypeScript 类型
- 避免使用 any
- 优先使用接口定义对象结构

## 代码风格
- 使用 2 空格缩进
- 使用单引号
- 行尾不加分号
- 使用 const 声明不会改变的变量

## 错误处理
- 使用 try-catch 处理异步操作
- 错误信息要具体
- 避免吞掉错误

## 文档维护
- 每次提交前检查 PROGRESS.md
- 更新已完成的功能
- 记录新的问题和计划

## 测试
- 新功能必须包含测试
- 保持测试代码简洁
- 测试用例要有描述性名称

# Cursor 编程规则 - 代码新手学习版

## 基本原则
- 我是代码新手，需要大量的注释和解释来帮助我理解代码
- 每段代码都应该有教育价值，帮助我学习编程概念
- 优先考虑代码的可读性和学习性，而不只是简洁性

## 注释要求

### 1. 文件级注释
- 每个文件开头必须有注释，说明这个文件的作用
- 解释这个文件在整个项目中的位置和重要性
- 列出主要的功能和职责

### 2. 函数/方法注释
- 每个函数都必须有详细的注释，包括：
  - 函数的目的和作用
  - 参数的含义和类型
  - 返回值的说明
  - 使用示例（如果复杂的话）
- 对于复杂的算法，要解释思路和步骤

### 3. 变量注释
- 重要的变量要有注释说明其含义
- 复杂的数据结构要解释其结构和用途
- 魔法数字必须用有意义的常量替代并注释

### 4. 代码块注释
- 复杂的逻辑块要有注释解释
- 循环和条件语句要说明判断条件的含义
- 重要的业务逻辑要有详细解释

## 学习导向的编程实践

### 1. 命名规范
- 使用有意义的变量名和函数名
- 避免缩写，除非是广泛认知的（如 id, url）
- 函数名应该清楚地表达其功能

### 2. 代码组织
- 保持函数简短，一个函数只做一件事
- 复杂功能要分解成多个小函数
- 相关的代码要组织在一起

### 3. 错误处理
- 明确的错误处理和异常说明
- 解释可能出现的错误情况
- 提供有用的错误信息

### 4. 学习资源引用
- 在使用新概念或技术时，提供相关学习资源的链接
- 引用官方文档或教程
- 解释为什么选择某种实现方式

## 代码示例格式

```javascript
/**
 * 计算两个数的和
 * 这是一个基础的数学运算函数，展示了函数定义和参数处理
 * 
 * @param {number} a - 第一个加数
 * @param {number} b - 第二个加数
 * @returns {number} 两数之和
 * 
 * 学习要点：
 * - 函数参数的定义和使用
 * - 返回值的概念
 * - JSDoc 注释格式
 */
function addNumbers(a, b) {
    // 验证输入参数是否为数字
    // 这是防御性编程的一个例子
    if (typeof a !== 'number' || typeof b !== 'number') {
        throw new Error('参数必须是数字类型');
    }
    
    // 执行加法运算并返回结果
    const result = a + b;
    return result;
}
```

## 代码审查要点
- 每次提交前检查是否有足够的注释
- 确保新手能够理解代码的意图
- 验证是否解释了关键的编程概念
- 检查是否提供了学习价值

## 学习进阶建议
- 定期重构旧代码，添加更好的注释
- 研究开源项目的代码注释方式
- 记录学习笔记和代码片段
- 与其他开发者交流和分享学习心得

---
记住：好的代码不仅仅是能工作的代码，更是能教会人的代码！ 